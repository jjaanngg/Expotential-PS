{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Workspace\\\\GitHub\\\\Expotential-PS\\\\Expotential-PS\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\n// Home.jsx\nimport React, { useState } from 'react'; // 상태 저장 기능 이용 useState\n\n// const는 변수 선언의 역할로 함수도 넣을 수 있음\n// => 는 앞으로 이러한 함수들을 선언된 변수에 추가할 것이다를 암시\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  //setMessage는 message 값을 바꿔주는 함수, message는 현재 상태를 의미함\n  const [message, setMessage] = useState('');\n\n  // 얘도 변수 선언이지만 async를 쓰면 서버 응답 기다릴 수 있는 await 사용 가능해서 씀(비동기 함수)\n  const handleClick = async () => {\n    // 서버 요청처럼 문제 발생할 수 있는 코드 실행할 때 try 사용, 일단 한번 해본다는 느낌\n    try {\n      const response = await fetch('http://localhost:4000/');\n      const data = await response.text();\n      setMessage(data);\n    } catch (error) {\n      // 문제 발생했을 때 실행할 코드 catch\n      console.error('서버 요청 실패:', error);\n    }\n  };\n\n  // align 좀 유용함\n  // return은 코드 전체 함수가 화면에 무엇을 보여줄지 반환하는 것, HTML과 매우 유사함\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    align: \"middle\",\n    style: {\n      paddingTop: '200px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Expotential-PS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"\\uC11C\\uBC84\\uC5D0\\uC11C \\uBA54\\uC2DC\\uC9C0 \\uBC1B\\uC544\\uC624\\uAE30!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n// App 컴포넌트를 외부에서도 사용할 수 있게 export (기본 export)\n_s(Home, \"l8KXAebGu4sZHsyCIQX7P8si41w=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Home","_s","message","setMessage","handleClick","response","fetch","data","text","error","console","align","style","paddingTop","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/PC/Workspace/GitHub/Expotential-PS/Expotential-PS/src/pages/Home.jsx"],"sourcesContent":["// Home.jsx\r\nimport React, { useState } from 'react'; // 상태 저장 기능 이용 useState\r\n\r\n// const는 변수 선언의 역할로 함수도 넣을 수 있음\r\n// => 는 앞으로 이러한 함수들을 선언된 변수에 추가할 것이다를 암시\r\nconst Home = () => {\r\n\t//setMessage는 message 값을 바꿔주는 함수, message는 현재 상태를 의미함\r\n  const [message, setMessage] = useState('');\r\n\t\r\n\t// 얘도 변수 선언이지만 async를 쓰면 서버 응답 기다릴 수 있는 await 사용 가능해서 씀(비동기 함수)\r\n  const handleClick = async () => {\r\n\t  // 서버 요청처럼 문제 발생할 수 있는 코드 실행할 때 try 사용, 일단 한번 해본다는 느낌\r\n    try {\r\n      const response = await fetch('http://localhost:4000/');\r\n      const data = await response.text();\r\n      setMessage(data);\r\n    } catch (error) { // 문제 발생했을 때 실행할 코드 catch\r\n      console.error('서버 요청 실패:', error);\r\n    }\r\n  };\r\n\t\r\n\t// align 좀 유용함\r\n\t// return은 코드 전체 함수가 화면에 무엇을 보여줄지 반환하는 것, HTML과 매우 유사함\r\n  return (\r\n    <div align=\"middle\" style={{ paddingTop: '200px' }}>\r\n      <h1>Expotential-PS</h1>\r\n      <button onClick={handleClick}>서버에서 메시지 받아오기!</button>\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n// App 컴포넌트를 외부에서도 사용할 수 있게 export (기본 export)\r\nexport default Home;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO,CAAC,CAAC;;AAEzC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB;EACC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;;EAE3C;EACC,MAAMO,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC/B;IACC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,CAAC;MACtD,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCL,UAAU,CAACI,IAAI,CAAC;IAClB,CAAC,CAAC,OAAOE,KAAK,EAAE;MAAE;MAChBC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACnC;EACF,CAAC;;EAEF;EACA;EACC,oBACEV,OAAA;IAAKY,KAAK,EAAC,QAAQ;IAACC,KAAK,EAAE;MAAEC,UAAU,EAAE;IAAQ,CAAE;IAAAC,QAAA,gBACjDf,OAAA;MAAAe,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBnB,OAAA;MAAQoB,OAAO,EAAEf,WAAY;MAAAU,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACrDnB,OAAA;MAAAe,QAAA,EAAIZ;IAAO;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEV,CAAC;;AAED;AAAAjB,EAAA,CA3BMD,IAAI;AAAAoB,EAAA,GAAJpB,IAAI;AA4BV,eAAeA,IAAI;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}