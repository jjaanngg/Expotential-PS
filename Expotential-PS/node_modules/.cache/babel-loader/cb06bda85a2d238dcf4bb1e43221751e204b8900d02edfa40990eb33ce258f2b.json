{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Workspace\\\\GitHub\\\\Expotential-PS\\\\Expotential-PS\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react'; // useState는 웹페이지 안에서 바뀌는 값(버튼 누르면 무엇인가 바뀐다거나,,)을 기억하는 기능. 이를 react로부터 가져오는 코드\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // 웹페이지 하나를 모두 담을 함수, 이 안에 버튼, 글자 모든 것들이 들어갈 예정임\n  const [message, setMessage] = useState(''); // 초기 메시지는 '' 아무것도 없음\n  //message : 화면에 보여줄 글자, setMessage : 이 글자 바꿀 수 있는 리모컨 역할\n\n  const handleClick = async () => {\n    // async는 PRD Bot 개발 때도 봤겠지만, 잠시 서버 응답을 기다리라는 것.\n    //버튼을 눌렀을 때 실행시킬 함수\n\n    try {\n      const response = await fetch('http://localhost:4000/'); // 3000은 프론트 포트, 4000은 백엔드 포트\n      const data = await response.text(); // 서버가 응답한 글자를 저장하는 변수, text()는 문자 그대로를 받아올 때 사용\n      setMessage(data); // 받은 글자를 data에 저장하는 코드\n    } catch (error) {\n      // 만약 오류 났을 때 실행시킬 코드, if의 else 부분이랑 비슷한 느낌\n      console.error('서버 요청 실패:', error); // 콘솔에 오류와 함께 오류 메시지를 띄우도록 함\n    }\n  };\n\n  // React 코드\n  //align이나 style은 엄청 많이 쓰이니 알아두면 좋음\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    align: \"middle\",\n    style: {\n      paddingTop: '200px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Expotential-PS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"\\uC11C\\uBC84\\uC5D0\\uC11C \\uBA54\\uC2DC\\uC9C0 \\uBC1B\\uC544\\uC624\\uAE30!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"l8KXAebGu4sZHsyCIQX7P8si41w=\");\n_c = App;\nexport default App; // 이 컴포넌트를 다른 파일에서도 쓸 수 있게 한다는 것. 실제로는 index.js라는 파일이 가져다가 화면에 띄운다.\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","message","setMessage","handleClick","response","fetch","data","text","error","console","align","style","paddingTop","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/PC/Workspace/GitHub/Expotential-PS/Expotential-PS/src/App.js"],"sourcesContent":["import React, {useState} from 'react'; // useState는 웹페이지 안에서 바뀌는 값(버튼 누르면 무엇인가 바뀐다거나,,)을 기억하는 기능. 이를 react로부터 가져오는 코드\r\n\r\nfunction App() { // 웹페이지 하나를 모두 담을 함수, 이 안에 버튼, 글자 모든 것들이 들어갈 예정임\r\n  const [message, setMessage] = useState(''); // 초기 메시지는 '' 아무것도 없음\r\n  //message : 화면에 보여줄 글자, setMessage : 이 글자 바꿀 수 있는 리모컨 역할\r\n  \r\n  const handleClick = async () => { // async는 PRD Bot 개발 때도 봤겠지만, 잠시 서버 응답을 기다리라는 것.\r\n    //버튼을 눌렀을 때 실행시킬 함수\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:4000/'); // 3000은 프론트 포트, 4000은 백엔드 포트\r\n      const data = await response.text(); // 서버가 응답한 글자를 저장하는 변수, text()는 문자 그대로를 받아올 때 사용\r\n      setMessage(data); // 받은 글자를 data에 저장하는 코드\r\n    } catch (error) { // 만약 오류 났을 때 실행시킬 코드, if의 else 부분이랑 비슷한 느낌\r\n      console.error('서버 요청 실패:', error); // 콘솔에 오류와 함께 오류 메시지를 띄우도록 함\r\n    }\r\n  };\r\n\r\n  // React 코드\r\n  //align이나 style은 엄청 많이 쓰이니 알아두면 좋음\r\n  return (\r\n    <div align = \"middle\" style={{paddingTop: '200px' }}>\r\n      <h1>Expotential-PS</h1>\r\n      <button onClick={handleClick}>서버에서 메시지 받아오기!</button>\r\n      <p>{message}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App; // 이 컴포넌트를 다른 파일에서도 쓸 수 있게 한다는 것. 실제로는 index.js라는 파일이 가져다가 화면에 띄운다."],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAAE;EACf,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5C;;EAEA,MAAMO,WAAW,GAAG,MAAAA,CAAA,KAAY;IAAE;IAChC;;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,CAAC,CAAC,CAAC;MACxD,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;MACpCL,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;MAAE;MAChBC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC,CAAC,CAAC;IACrC;EACF,CAAC;;EAED;EACA;EACA,oBACEV,OAAA;IAAKY,KAAK,EAAG,QAAQ;IAACC,KAAK,EAAE;MAACC,UAAU,EAAE;IAAQ,CAAE;IAAAC,QAAA,gBAClDf,OAAA;MAAAe,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBnB,OAAA;MAAQoB,OAAO,EAAEf,WAAY;MAAAU,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACrDnB,OAAA;MAAAe,QAAA,EAAIZ;IAAO;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEV;AAACjB,EAAA,CAzBQD,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AA2BZ,eAAeA,GAAG,CAAC,CAAC;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}