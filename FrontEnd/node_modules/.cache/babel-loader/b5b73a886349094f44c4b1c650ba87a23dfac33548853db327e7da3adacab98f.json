{"ast":null,"code":"// src/api.js\nimport axios from 'axios';\n\n// 1. 새로운 axios 인스턴스(통신원) 생성\nconst api = axios.create();\n\n// 2. 통신원이 요청을 보내기 직전에 항상 가방(헤더)을 확인하도록 설정\napi.interceptors.request.use(config => {\n  // localStorage에서 토큰을 꺼낸다.\n  const token = localStorage.getItem('token');\n  // 토큰이 있으면, Authorization 헤더에 담아서 보낸다.\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject"],"sources":["C:/Users/PC/Workspace/GitHub/Expotential-PS/FrontEnd/src/api.js"],"sourcesContent":["// src/api.js\r\nimport axios from 'axios';\r\n\r\n// 1. 새로운 axios 인스턴스(통신원) 생성\r\nconst api = axios.create();\r\n\r\n// 2. 통신원이 요청을 보내기 직전에 항상 가방(헤더)을 확인하도록 설정\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // localStorage에서 토큰을 꺼낸다.\r\n    const token = localStorage.getItem('token');\r\n    // 토큰이 있으면, Authorization 헤더에 담아서 보낸다.\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC,CAAC;;AAE1B;AACAD,GAAG,CAACE,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C;EACA,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeV,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}